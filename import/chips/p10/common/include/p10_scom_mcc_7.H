/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: import/chips/p10/common/include/p10_scom_mcc_7.H $            */
/*                                                                        */
/* OpenPOWER EKB Project                                                  */
/*                                                                        */
/* COPYRIGHT 2019                                                         */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */

#ifndef __PPE_HCODE__
    #include "proc_scomt.H"
#endif

#ifndef __p10_scom_mcc_7_H_
#define __p10_scom_mcc_7_H_


#ifndef __PPE_HCODE__
namespace scomt
{
namespace mcc
{
#endif


static const uint64_t ATCL_CL_CLSCOM_MCBUSYQ = 0x0c010c27ull;

static const uint32_t ATCL_CL_CLSCOM_MCBUSYQ_ENABLE_BUSY_COUNTERS = 0;
static const uint32_t ATCL_CL_CLSCOM_MCBUSYQ_BUSY_COUNTER_WINDOW_SELECT = 1;
static const uint32_t ATCL_CL_CLSCOM_MCBUSYQ_BUSY_COUNTER_WINDOW_SELECT_LEN = 3;
static const uint32_t ATCL_CL_CLSCOM_MCBUSYQ_BUSY_COUNTER_THRESHOLD0 = 4;
static const uint32_t ATCL_CL_CLSCOM_MCBUSYQ_BUSY_COUNTER_THRESHOLD0_LEN = 10;
static const uint32_t ATCL_CL_CLSCOM_MCBUSYQ_BUSY_COUNTER_THRESHOLD1 = 14;
static const uint32_t ATCL_CL_CLSCOM_MCBUSYQ_BUSY_COUNTER_THRESHOLD1_LEN = 10;
static const uint32_t ATCL_CL_CLSCOM_MCBUSYQ_BUSY_COUNTER_THRESHOLD2 = 24;
static const uint32_t ATCL_CL_CLSCOM_MCBUSYQ_BUSY_COUNTER_THRESHOLD2_LEN = 10;
static const uint32_t ATCL_CL_CLSCOM_MCBUSYQ_ENABLE_AGGRESSIVE_BUSY = 34;
static const uint32_t ATCL_CL_CLSCOM_MCBUSYQ_RSVD_35_43 = 35;
static const uint32_t ATCL_CL_CLSCOM_MCBUSYQ_RSVD_35_43_LEN = 9;
// mcc/reg00007.H

static const uint64_t ATCL_CL_CLSCOM_MCPERF3 = 0x0c010c2bull;

static const uint32_t ATCL_CL_CLSCOM_MCPERF3_EN_DROP_PLS_F_FULL = 0;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_DIS_DROPABLE_HP = 1;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_EN_PF_CONF_RETRY = 2;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_DROP_PLS_DIV00 = 3;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_DROP_PLS_DIV00_LEN = 3;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_DROP_PLS_DIV01 = 6;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_DROP_PLS_DIV01_LEN = 3;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_DROP_PLS_DIV10 = 9;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_DROP_PLS_DIV10_LEN = 3;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_DROP_PLS_DIV11 = 12;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_DROP_PLS_DIV11_LEN = 3;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_PF_CONF_RETRY_THRESH0 = 15;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_PF_CONF_RETRY_THRESH0_LEN = 4;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_PF_CONF_RETRY_THRESH1 = 19;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_PF_CONF_RETRY_THRESH1_LEN = 4;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_PF_CONF_RETRY_THRESH2 = 23;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_PF_CONF_RETRY_THRESH2_LEN = 4;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_PF_CONF_RETRY_THRESH3 = 27;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_PF_CONF_RETRY_THRESH3_LEN = 4;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_WRBUF_DONE_EQ_WRITE = 31;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_RMWBUF_DONE_EQ_WRITE = 32;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_EN_MDI_UPDATE_MIRROR = 33;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_RESERVED_34_36 = 34;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_RESERVED_34_36_LEN = 3;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_HP_PF_EQ_LP_RD = 37;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_LP_PF_EQ_RD = 38;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_ENABLE_CRESP_STALL = 39;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_ENABLE_RMW_BUF_DEALLOC_STALL = 40;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_ENABLE_PROMOTE_RESET_DROP = 41;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_DISABLE_READ_HIT_AMO_WINDOW = 42;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_ENABLE_CP_M_MDI0_LOCAL_ONLY = 43;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_RESERVED44 = 44;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_AMO_LIMIT_SEL = 45;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_HP_WR_EQ_LP_RD = 46;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_HP_WR_EQ_RD = 47;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_NSQ_LOC0_CNT_SEL = 48;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_NSQ_LOC0_CNT_SEL_LEN = 3;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_SQ_LOC0_CNT_SEL = 51;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_SQ_LOC0_CNT_SEL_LEN = 3;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_TIMEOUT_FORCE_RETRY = 54;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_TIMEOUT_FORCE_CH_FAIL = 55;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_DISABLE_RETRY_AMO_HPC_WR_BAD_CR = 56;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_EN_INBAND_NO_DISP_WIN = 57;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_INBAND_NO_DISP_THRESH = 58;
static const uint32_t ATCL_CL_CLSCOM_MCPERF3_INBAND_NO_DISP_THRESH_LEN = 6;
// mcc/reg00007.H

static const uint64_t CRYPTO_ENCRYPT_CRYPTOKEY1A = 0x0c010f52ull;

static const uint32_t CRYPTO_ENCRYPT_CRYPTOKEY1A_KEY1A = 0;
static const uint32_t CRYPTO_ENCRYPT_CRYPTOKEY1A_KEY1A_LEN = 64;
// mcc/reg00007.H

static const uint64_t DSTL_DSTLINJ = 0x0c010d0dull;

static const uint32_t DSTL_DSTLINJ_ERR_INJ_TRIGGER = 0;
static const uint32_t DSTL_DSTLINJ_ERR_INJ_CONT_MODE = 1;
static const uint32_t DSTL_DSTLINJ_ERR_INJ_TYPE = 2;
static const uint32_t DSTL_DSTLINJ_ERR_INJ_SUBCH_SEL = 3;
static const uint32_t DSTL_DSTLINJ_RESERVED_4_15 = 4;
static const uint32_t DSTL_DSTLINJ_RESERVED_4_15_LEN = 12;
// mcc/reg00007.H

static const uint64_t WRITE_READCFG = 0x0c010f4dull;

static const uint32_t WRITE_READCFG_CFG_RD_EINJ_TARGET = 0;
static const uint32_t WRITE_READCFG_CFG_RD_EINJ_TARGET_LEN = 3;
static const uint32_t WRITE_READCFG_CFG_RD_EINJ_RATE = 3;
static const uint32_t WRITE_READCFG_CFG_RD_EINJ_RATE_LEN = 3;
static const uint32_t WRITE_READCFG_CFG_DISABLE_EARLY_TRIGGER = 6;
static const uint32_t WRITE_READCFG_CFG_RD_FAIL_ACTION = 7;
static const uint32_t WRITE_READCFG_CFG_RD_FAIL_ACTION_LEN = 2;
static const uint32_t WRITE_READCFG_READCFG_RESERVED_9_11 = 9;
static const uint32_t WRITE_READCFG_READCFG_RESERVED_9_11_LEN = 3;
static const uint32_t WRITE_READCFG_CFG_MMIO_SUE_BAD_DATA = 12;
static const uint32_t WRITE_READCFG_CFG_RTYFAIL_NO_BD = 13;
static const uint32_t WRITE_READCFG_READCFG_CAPTURE_1ST_SYNDROME = 14;
static const uint32_t WRITE_READCFG_READCFG_SYNDROME_FIR_ENABLE = 15;
static const uint32_t WRITE_READCFG_CFG_BYPASS_SUPPORT_64B_FAILS = 16;
static const uint32_t WRITE_READCFG_CFG_BOGUS_NO_BD = 17;
static const uint32_t WRITE_READCFG_CFG_DO_DUAL_PACKET_ANALYSIS = 18;
static const uint32_t WRITE_READCFG_CFG_P1PF_DROP_THRESHOLD = 19;
static const uint32_t WRITE_READCFG_CFG_P1PF_DROP_THRESHOLD_LEN = 7;
static const uint32_t WRITE_READCFG_CFG_P1PF_EN_PEND_ADJ = 26;
static const uint32_t WRITE_READCFG_CFG_P1PF_STOP_THRESHOLD = 27;
static const uint32_t WRITE_READCFG_CFG_P1PF_STOP_THRESHOLD_LEN = 7;
static const uint32_t WRITE_READCFG_READCFG_RESERVED_34_39 = 34;
static const uint32_t WRITE_READCFG_READCFG_RESERVED_34_39_LEN = 6;
// mcc/reg00007.H

static const uint64_t WRITE_WRT_DSTL_ECC = 0x0c010f4cull;

static const uint32_t WRITE_WRT_DSTL_ECC_0_ERR_TYPE = 0;
static const uint32_t WRITE_WRT_DSTL_ECC_0_ERR_TYPE_LEN = 3;
static const uint32_t WRITE_WRT_DSTL_ECC_0_SYNDROME = 8;
static const uint32_t WRITE_WRT_DSTL_ECC_0_SYNDROME_LEN = 8;
static const uint32_t WRITE_WRT_DSTL_ECC_1_ERR_TYPE = 16;
static const uint32_t WRITE_WRT_DSTL_ECC_1_ERR_TYPE_LEN = 3;
static const uint32_t WRITE_WRT_DSTL_ECC_1_SYNDROME = 24;
static const uint32_t WRITE_WRT_DSTL_ECC_1_SYNDROME_LEN = 8;
static const uint32_t WRITE_WRT_DSTL_ECC_2_ERR_TYPE = 32;
static const uint32_t WRITE_WRT_DSTL_ECC_2_ERR_TYPE_LEN = 3;
static const uint32_t WRITE_WRT_DSTL_ECC_2_SYNDROME = 40;
static const uint32_t WRITE_WRT_DSTL_ECC_2_SYNDROME_LEN = 8;
static const uint32_t WRITE_WRT_DSTL_ECC_3_ERR_TYPE = 48;
static const uint32_t WRITE_WRT_DSTL_ECC_3_ERR_TYPE_LEN = 3;
static const uint32_t WRITE_WRT_DSTL_ECC_3_SYNDROME = 56;
static const uint32_t WRITE_WRT_DSTL_ECC_3_SYNDROME_LEN = 8;
// mcc/reg00007.H

#ifndef __PPE_HCODE__
}
}
#include "mcc/reg00007.H"
#endif
#endif
