/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: import/chips/p10/common/include/p10_scom_eq_9_unused.H $      */
/*                                                                        */
/* OpenPOWER EKB Project                                                  */
/*                                                                        */
/* COPYRIGHT 2019,2020                                                    */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */

#ifndef __PPE_HCODE__
    #include "proc_scomt.H"
#endif

#ifndef __p10_scom_eq_9_H_UNUSED__
#define __p10_scom_eq_9_H_UNUSED__


#ifndef __PPE_HCODE__
namespace scomt
{
namespace eq
{
#endif


//>> [CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG]
static const uint64_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG = 0x2001831bull;

static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_MODE_FSM_STATE = 2;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_MODE_FSM_STATE_LEN = 6;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_INIT = 13;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_HOLD = 14;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_START = 15;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_LOAD_LP = 16;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_WAIT_LP = 17;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_LOAD_DAC = 18;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_WAIT_DAC = 19;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_LOAD_SENS_EN = 20;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_MEASURE = 21;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_COMP = 22;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_EVAL = 23;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_FINISH = 24;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_ERROR = 25;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_WAIT_LOCK = 26;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_MODEFSM_HOLD = 27;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_MODEFSM_ADJUST = 28;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_MODEFSM_ONE_SHOT = 29;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_MODEFSM_SINGLE_STP = 30;
static const uint32_t CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_MODEFSM_MEAS_ONLY = 31;
//<< [CLK_ADJ_00_DCADJ_WRAP_MODE_FSM_STATE_REG]
// eq/reg00009.H

//>> [CLK_ADJ_00_SKEW_WRAP_SKEWADJ_PDLY_FSM_STATES]
static const uint64_t CLK_ADJ_00_SKEW_WRAP_SKEWADJ_PDLY_FSM_STATES = 0x20018336ull;

static const uint32_t CLK_ADJ_00_SKEW_WRAP_SKEWADJ_PDLY_FSM_STATES_ORE_PDLY_STATE = 10;
static const uint32_t CLK_ADJ_00_SKEW_WRAP_SKEWADJ_PDLY_FSM_STATES_ORE_PDLY_STATE_LEN = 6;
static const uint32_t CLK_ADJ_00_SKEW_WRAP_SKEWADJ_PDLY_FSM_STATES_ACHE_PDLY_STATE = 26;
static const uint32_t CLK_ADJ_00_SKEW_WRAP_SKEWADJ_PDLY_FSM_STATES_ACHE_PDLY_STATE_LEN = 6;
//<< [CLK_ADJ_00_SKEW_WRAP_SKEWADJ_PDLY_FSM_STATES]
// eq/reg00009.H

//>> [CLK_ADJ_00_SKEW_WRAP_SKEWADJ_SENSOR_DATA]
static const uint64_t CLK_ADJ_00_SKEW_WRAP_SKEWADJ_SENSOR_DATA = 0x20018339ull;

static const uint32_t CLK_ADJ_00_SKEW_WRAP_SKEWADJ_SENSOR_DATA_ORE_IS_LATE = 3;
static const uint32_t CLK_ADJ_00_SKEW_WRAP_SKEWADJ_SENSOR_DATA_ORE_IS_LATE_HIST = 4;
static const uint32_t CLK_ADJ_00_SKEW_WRAP_SKEWADJ_SENSOR_DATA_ORE_IS_LATE_HIST_LEN = 4;
static const uint32_t CLK_ADJ_00_SKEW_WRAP_SKEWADJ_SENSOR_DATA_ACHE_IS_LATE = 11;
static const uint32_t CLK_ADJ_00_SKEW_WRAP_SKEWADJ_SENSOR_DATA_ACHE_IS_LATE_HIST = 12;
static const uint32_t CLK_ADJ_00_SKEW_WRAP_SKEWADJ_SENSOR_DATA_ACHE_IS_LATE_HIST_LEN = 4;
//<< [CLK_ADJ_00_SKEW_WRAP_SKEWADJ_SENSOR_DATA]
// eq/reg00009.H

//>> [CLK_ADJ_01_DCADJ_WRAP_SET_CONFIG]
static const uint64_t CLK_ADJ_01_DCADJ_WRAP_SET_CONFIG = 0x2001430cull;

static const uint32_t CLK_ADJ_01_DCADJ_WRAP_SET_CONFIG_INVERT_SENSE = 0;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_SET_CONFIG_ADJUSTMENT_DIR = 1;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_SET_CONFIG_CHKSW_NO_OVR_PARATIY_ERROR = 2;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_SET_CONFIG_CHKSW_NO_DCC_CONFIG_VISIBLE = 3;
//<< [CLK_ADJ_01_DCADJ_WRAP_SET_CONFIG]
// eq/reg00009.H

//>> [CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS]
static const uint64_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS = 0x20014317ull;

static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_ONE_SHOT_STATE = 3;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_DCC_OVERFLOW = 4;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_DCC_UNDERFLOW = 5;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_DCC_LOCK = 6;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_ADJUST_ERR = 7;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_DCSENSE_IN = 8;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_PRELOAD1 = 9;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_PRELOAD2 = 10;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_PRELOAD3 = 11;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_WAIT_CNT_EN = 12;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_CHOP = 13;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_FSM_STATE = 14;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_FSM_STATE_LEN = 5;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_COMP_CYCLE = 19;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_COMP_CYCLE_LEN = 3;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_INVERT_SENSE = 22;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_ADJUSTMENT_DIR = 23;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_DCC_CONFIG = 24;
static const uint32_t CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS_DCC_CONFIG_LEN = 8;
//<< [CLK_ADJ_01_DCADJ_WRAP_STATUS_BITS]
// eq/reg00009.H

//>> [CLK_ADJ_01_SKEW_WRAP_SKEWADJ_SET_ADJUST_MODE]
static const uint64_t CLK_ADJ_01_SKEW_WRAP_SKEWADJ_SET_ADJUST_MODE = 0x20014322ull;

static const uint32_t CLK_ADJ_01_SKEW_WRAP_SKEWADJ_SET_ADJUST_MODE_SINGLE_STEP_MD_SET = 0;
static const uint32_t CLK_ADJ_01_SKEW_WRAP_SKEWADJ_SET_ADJUST_MODE_ONE_SHOT_MD_SET = 1;
static const uint32_t CLK_ADJ_01_SKEW_WRAP_SKEWADJ_SET_ADJUST_MODE_ADJUST_MD_SET = 2;
static const uint32_t CLK_ADJ_01_SKEW_WRAP_SKEWADJ_SET_ADJUST_MODE_HOLD_MD_SET = 3;
static const uint32_t CLK_ADJ_01_SKEW_WRAP_SKEWADJ_SET_ADJUST_MODE_INIT_MD_SET = 4;
//<< [CLK_ADJ_01_SKEW_WRAP_SKEWADJ_SET_ADJUST_MODE]
// eq/reg00009.H

//>> [CLK_ADJ_01_SKEW_WRAP_SKEWADJ_SET_INIT_MODE]
static const uint64_t CLK_ADJ_01_SKEW_WRAP_SKEWADJ_SET_INIT_MODE = 0x20014320ull;
//<< [CLK_ADJ_01_SKEW_WRAP_SKEWADJ_SET_INIT_MODE]
// eq/reg00009.H

//>> [CLK_ADJ_02_DCADJ_WRAP_PHASE_MEASUREMENT]
static const uint64_t CLK_ADJ_02_DCADJ_WRAP_PHASE_MEASUREMENT = 0x20012318ull;

static const uint32_t CLK_ADJ_02_DCADJ_WRAP_PHASE_MEASUREMENT_1_VAL = 0;
static const uint32_t CLK_ADJ_02_DCADJ_WRAP_PHASE_MEASUREMENT_2_VAL = 1;
static const uint32_t CLK_ADJ_02_DCADJ_WRAP_PHASE_MEASUREMENT_2_VAL_LEN = 7;
static const uint32_t CLK_ADJ_02_DCADJ_WRAP_PHASE_MEASUREMENT_3_VAL = 8;
static const uint32_t CLK_ADJ_02_DCADJ_WRAP_PHASE_MEASUREMENT_4_VAL = 9;
static const uint32_t CLK_ADJ_02_DCADJ_WRAP_PHASE_MEASUREMENT_4_VAL_LEN = 7;
//<< [CLK_ADJ_02_DCADJ_WRAP_PHASE_MEASUREMENT]
// eq/reg00009.H

//>> [CLK_ADJ_02_DCADJ_WRAP_SET_DCC_TARGET]
static const uint64_t CLK_ADJ_02_DCADJ_WRAP_SET_DCC_TARGET = 0x20012308ull;

static const uint32_t CLK_ADJ_02_DCADJ_WRAP_SET_DCC_TARGET_TARGET_VALUE = 0;
static const uint32_t CLK_ADJ_02_DCADJ_WRAP_SET_DCC_TARGET_TARGET_VALUE_LEN = 7;
//<< [CLK_ADJ_02_DCADJ_WRAP_SET_DCC_TARGET]
// eq/reg00009.H

//>> [CLK_ADJ_02_DCADJ_WRAP_SET_MEASURE_ONLY_MODE]
static const uint64_t CLK_ADJ_02_DCADJ_WRAP_SET_MEASURE_ONLY_MODE = 0x20012311ull;

static const uint32_t CLK_ADJ_02_DCADJ_WRAP_SET_MEASURE_ONLY_MODE_SET_MEASURE_ONLY_MD_SET1 = 4;
//<< [CLK_ADJ_02_DCADJ_WRAP_SET_MEASURE_ONLY_MODE]
// eq/reg00009.H

//>> [CLK_ADJ_02_SKEW_WRAP_SKEWADJ_SET_OVERRIDE_CORE_SYNC_ENABLE]
static const uint64_t CLK_ADJ_02_SKEW_WRAP_SKEWADJ_SET_OVERRIDE_CORE_SYNC_ENABLE = 0x20012330ull;

static const uint32_t CLK_ADJ_02_SKEW_WRAP_SKEWADJ_SET_OVERRIDE_CORE_SYNC_ENABLE_ENABLE_OVERRIDE = 0;
static const uint32_t CLK_ADJ_02_SKEW_WRAP_SKEWADJ_SET_OVERRIDE_CORE_SYNC_ENABLE_VALUE_OVERRIDE = 1;
//<< [CLK_ADJ_02_SKEW_WRAP_SKEWADJ_SET_OVERRIDE_CORE_SYNC_ENABLE]
// eq/reg00009.H

//>> [CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG]
static const uint64_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG = 0x2001131bull;

static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_MODE_FSM_STATE = 2;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_MODE_FSM_STATE_LEN = 6;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_INIT = 13;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_HOLD = 14;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_START = 15;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_LOAD_LP = 16;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_WAIT_LP = 17;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_LOAD_DAC = 18;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_WAIT_DAC = 19;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_LOAD_SENS_EN = 20;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_MEASURE = 21;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_COMP = 22;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_EVAL = 23;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_FINISH = 24;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_ERROR = 25;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_STATE_WAIT_LOCK = 26;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_MODEFSM_HOLD = 27;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_MODEFSM_ADJUST = 28;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_MODEFSM_ONE_SHOT = 29;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_MODEFSM_SINGLE_STP = 30;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG_IS_MODEFSM_MEAS_ONLY = 31;
//<< [CLK_ADJ_03_DCADJ_WRAP_MODE_FSM_STATE_REG]
// eq/reg00009.H

//>> [CLK_ADJ_03_DCADJ_WRAP_SET_COMP_DLY]
static const uint64_t CLK_ADJ_03_DCADJ_WRAP_SET_COMP_DLY = 0x2001130bull;

static const uint32_t CLK_ADJ_03_DCADJ_WRAP_SET_COMP_DLY_COMP_DELAY_VALUE = 0;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_SET_COMP_DLY_COMP_DELAY_VALUE_LEN = 16;
//<< [CLK_ADJ_03_DCADJ_WRAP_SET_COMP_DLY]
// eq/reg00009.H

//>> [CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS]
static const uint64_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS = 0x20011317ull;

static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_ONE_SHOT_STATE = 3;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_DCC_OVERFLOW = 4;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_DCC_UNDERFLOW = 5;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_DCC_LOCK = 6;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_ADJUST_ERR = 7;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_DCSENSE_IN = 8;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_PRELOAD1 = 9;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_PRELOAD2 = 10;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_PRELOAD3 = 11;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_WAIT_CNT_EN = 12;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_CHOP = 13;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_FSM_STATE = 14;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_FSM_STATE_LEN = 5;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_COMP_CYCLE = 19;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_COMP_CYCLE_LEN = 3;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_INVERT_SENSE = 22;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_ADJUSTMENT_DIR = 23;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_DCC_CONFIG = 24;
static const uint32_t CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS_DCC_CONFIG_LEN = 8;
//<< [CLK_ADJ_03_DCADJ_WRAP_STATUS_BITS]
// eq/reg00009.H

//>> [CLK_ADJ_03_SKEW_WRAP_SKEWADJ_SET_INVERT_CACHE_PDLYS]
static const uint64_t CLK_ADJ_03_SKEW_WRAP_SKEWADJ_SET_INVERT_CACHE_PDLYS = 0x2001132dull;

static const uint32_t CLK_ADJ_03_SKEW_WRAP_SKEWADJ_SET_INVERT_CACHE_PDLYS_CACHE_PDLYS_INVERT = 0;
//<< [CLK_ADJ_03_SKEW_WRAP_SKEWADJ_SET_INVERT_CACHE_PDLYS]
// eq/reg00009.H

//>> [EPS_FIR_CLKSTOP_ON_XSTOP_MASK3]
static const uint64_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3 = 0x20040083ull;

static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_XSTOP_ERR = 0;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_RECOV_ERR = 1;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SPATTN_ERR = 2;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_LXSTOP_ERR = 3;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_HOSTATTN_ERR = 4;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_ERR = 5;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_SYS_XSTOP_STAGED_ERR = 6;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_DBG_TRIG_ERR = 7;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP01 = 12;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP02 = 13;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP03 = 14;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP04 = 15;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP05 = 16;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP06 = 17;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP07 = 18;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP08 = 19;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP09 = 20;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP010 = 21;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP011 = 22;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP012 = 23;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP013 = 24;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP014 = 25;
static const uint32_t EPS_FIR_CLKSTOP_ON_XSTOP_MASK3_UNIT_TC_FIR_LOCAL_XSTOP015 = 26;
//<< [EPS_FIR_CLKSTOP_ON_XSTOP_MASK3]
// eq/reg00009.H

//>> [EPS_THERM_WSUB2_SKITTER_FORCE_REG]
static const uint64_t EPS_THERM_WSUB2_SKITTER_FORCE_REG = 0x20050034ull;

static const uint32_t EPS_THERM_WSUB2_SKITTER_FORCE_REG_F_SKITTER_READ = 0;
//<< [EPS_THERM_WSUB2_SKITTER_FORCE_REG]
// eq/reg00009.H

//>> [EPS_THERM_WSUB_SKITTER_DATA2]
static const uint64_t EPS_THERM_WSUB_SKITTER_DATA2 = 0x2005001bull;
//<< [EPS_THERM_WSUB_SKITTER_DATA2]
// eq/reg00009.H

//>> [EPS_THERM_WSUB_SKITTER_FORCE_REG]
static const uint64_t EPS_THERM_WSUB_SKITTER_FORCE_REG = 0x20050014ull;

static const uint32_t EPS_THERM_WSUB_SKITTER_FORCE_REG_F_SKITTER_READ = 0;
//<< [EPS_THERM_WSUB_SKITTER_FORCE_REG]
// eq/reg00009.H

//>> [L3TRA0_TR0_CONFIG_0]
static const uint64_t L3TRA0_TR0_CONFIG_0 = 0x20018203ull;

static const uint32_t L3TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63 = 0;
static const uint32_t L3TRA0_TR0_CONFIG_0_CMP_MSK_LT_B_0_TO_63_LEN = 64;
//<< [L3TRA0_TR0_CONFIG_0]
// eq/reg00009.H

//>> [L3TRA0_TR1_CONFIG_9]
static const uint64_t L3TRA0_TR1_CONFIG_9 = 0x20018229ull;

static const uint32_t L3TRA0_TR1_CONFIG_9_DISABLE_COMPRESSION = 0;
static const uint32_t L3TRA0_TR1_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK = 1;
static const uint32_t L3TRA0_TR1_CONFIG_9_MATCHA_MUXSEL = 2;
static const uint32_t L3TRA0_TR1_CONFIG_9_MATCHA_MUXSEL_LEN = 2;
static const uint32_t L3TRA0_TR1_CONFIG_9_MATCHB_MUXSEL = 4;
static const uint32_t L3TRA0_TR1_CONFIG_9_MATCHB_MUXSEL_LEN = 2;
static const uint32_t L3TRA0_TR1_CONFIG_9_MATCHC_MUXSEL = 6;
static const uint32_t L3TRA0_TR1_CONFIG_9_MATCHC_MUXSEL_LEN = 2;
static const uint32_t L3TRA0_TR1_CONFIG_9_MATCHD_MUXSEL = 8;
static const uint32_t L3TRA0_TR1_CONFIG_9_MATCHD_MUXSEL_LEN = 2;
static const uint32_t L3TRA0_TR1_CONFIG_9_TRIG0_OR_MASK = 10;
static const uint32_t L3TRA0_TR1_CONFIG_9_TRIG0_OR_MASK_LEN = 4;
static const uint32_t L3TRA0_TR1_CONFIG_9_TRIG0_AND_MASK = 14;
static const uint32_t L3TRA0_TR1_CONFIG_9_TRIG0_AND_MASK_LEN = 4;
static const uint32_t L3TRA0_TR1_CONFIG_9_TRIG1_OR_MASK = 18;
static const uint32_t L3TRA0_TR1_CONFIG_9_TRIG1_OR_MASK_LEN = 4;
static const uint32_t L3TRA0_TR1_CONFIG_9_TRIG1_AND_MASK = 22;
static const uint32_t L3TRA0_TR1_CONFIG_9_TRIG1_AND_MASK_LEN = 4;
static const uint32_t L3TRA0_TR1_CONFIG_9_TRIG0_NOT_MODE = 26;
static const uint32_t L3TRA0_TR1_CONFIG_9_TRIG1_NOT_MODE = 27;
static const uint32_t L3TRA0_TR1_CONFIG_9_MATCH_NOT_MODE = 28;
static const uint32_t L3TRA0_TR1_CONFIG_9_MATCH_NOT_MODE_LEN = 4;
static const uint32_t L3TRA0_TR1_CONFIG_9_ERROR_CMP_MASK = 32;
static const uint32_t L3TRA0_TR1_CONFIG_9_ERROR_CMP_PATTERN = 33;
static const uint32_t L3TRA0_TR1_CONFIG_9_TRIG0_ERR_CMP = 34;
static const uint32_t L3TRA0_TR1_CONFIG_9_TRIG1_ERR_CMP = 35;
static const uint32_t L3TRA0_TR1_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES = 36;
static const uint32_t L3TRA0_TR1_CONFIG_9_SPARE_LT = 37;
//<< [L3TRA0_TR1_CONFIG_9]
// eq/reg00009.H

//>> [L3TRA2_TR1_CONFIG_1]
static const uint64_t L3TRA2_TR1_CONFIG_1 = 0x200182a4ull;

static const uint32_t L3TRA2_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87 = 0;
static const uint32_t L3TRA2_TR1_CONFIG_1_CMP_MSK_LT_B_64_TO_87_LEN = 24;
//<< [L3TRA2_TR1_CONFIG_1]
// eq/reg00009.H

//>> [MULTICAST_GROUP_2]
static const uint64_t MULTICAST_GROUP_2 = 0x200f0002ull;

static const uint32_t MULTICAST_GROUP_2_MULTICAST2_GROUP = 3;
static const uint32_t MULTICAST_GROUP_2_MULTICAST2_GROUP_LEN = 3;
//<< [MULTICAST_GROUP_2]
// eq/reg00009.H

//>> [QMETRA0_TR0_CONFIG_9]
static const uint64_t QMETRA0_TR0_CONFIG_9 = 0x20018409ull;

static const uint32_t QMETRA0_TR0_CONFIG_9_DISABLE_COMPRESSION = 0;
static const uint32_t QMETRA0_TR0_CONFIG_9_ERROR_BIT_COMPRESSION_CARE_MASK = 1;
static const uint32_t QMETRA0_TR0_CONFIG_9_MATCHA_MUXSEL = 2;
static const uint32_t QMETRA0_TR0_CONFIG_9_MATCHA_MUXSEL_LEN = 2;
static const uint32_t QMETRA0_TR0_CONFIG_9_MATCHB_MUXSEL = 4;
static const uint32_t QMETRA0_TR0_CONFIG_9_MATCHB_MUXSEL_LEN = 2;
static const uint32_t QMETRA0_TR0_CONFIG_9_MATCHC_MUXSEL = 6;
static const uint32_t QMETRA0_TR0_CONFIG_9_MATCHC_MUXSEL_LEN = 2;
static const uint32_t QMETRA0_TR0_CONFIG_9_MATCHD_MUXSEL = 8;
static const uint32_t QMETRA0_TR0_CONFIG_9_MATCHD_MUXSEL_LEN = 2;
static const uint32_t QMETRA0_TR0_CONFIG_9_TRIG0_OR_MASK = 10;
static const uint32_t QMETRA0_TR0_CONFIG_9_TRIG0_OR_MASK_LEN = 4;
static const uint32_t QMETRA0_TR0_CONFIG_9_TRIG0_AND_MASK = 14;
static const uint32_t QMETRA0_TR0_CONFIG_9_TRIG0_AND_MASK_LEN = 4;
static const uint32_t QMETRA0_TR0_CONFIG_9_TRIG1_OR_MASK = 18;
static const uint32_t QMETRA0_TR0_CONFIG_9_TRIG1_OR_MASK_LEN = 4;
static const uint32_t QMETRA0_TR0_CONFIG_9_TRIG1_AND_MASK = 22;
static const uint32_t QMETRA0_TR0_CONFIG_9_TRIG1_AND_MASK_LEN = 4;
static const uint32_t QMETRA0_TR0_CONFIG_9_TRIG0_NOT_MODE = 26;
static const uint32_t QMETRA0_TR0_CONFIG_9_TRIG1_NOT_MODE = 27;
static const uint32_t QMETRA0_TR0_CONFIG_9_MATCH_NOT_MODE = 28;
static const uint32_t QMETRA0_TR0_CONFIG_9_MATCH_NOT_MODE_LEN = 4;
static const uint32_t QMETRA0_TR0_CONFIG_9_ERROR_CMP_MASK = 32;
static const uint32_t QMETRA0_TR0_CONFIG_9_ERROR_CMP_PATTERN = 33;
static const uint32_t QMETRA0_TR0_CONFIG_9_TRIG0_ERR_CMP = 34;
static const uint32_t QMETRA0_TR0_CONFIG_9_TRIG1_ERR_CMP = 35;
static const uint32_t QMETRA0_TR0_CONFIG_9_DD1_STRETCH_TRIGGER_PULSES = 36;
static const uint32_t QMETRA0_TR0_CONFIG_9_SPARE_LT = 37;
//<< [QMETRA0_TR0_CONFIG_9]
// eq/reg00009.H

//>> [QMETRA0_TR1_CONFIG_0]
static const uint64_t QMETRA0_TR1_CONFIG_0 = 0x20018443ull;

static const uint32_t QMETRA0_TR1_CONFIG_0_CMP_MSK_LT_B_0_TO_63 = 0;
static const uint32_t QMETRA0_TR1_CONFIG_0_CMP_MSK_LT_B_0_TO_63_LEN = 64;
//<< [QMETRA0_TR1_CONFIG_0]
// eq/reg00009.H

//>>THE END<<

#ifndef __PPE_HCODE__
}
}
#include "eq/reg00009_unused.H"
#endif
#endif
